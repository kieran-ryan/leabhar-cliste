{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Leabhar Cliste","text":"<p>Welcome to Leabhar Cliste, a comprehensive guide to programming practices, principles, and concepts. These resource aims to capture an understanding and proficiency in various aspects of software engineering.</p> <p>Dive into the following topics:</p> <ul> <li>API - API design principles and best practices.</li> <li>Complexity - Concepts of complexity in programming.</li> <li>Console - Useful command line tips and usage.</li> <li>Database - Database design concepts.</li> <li>Design - General design and engineering principles to follow.</li> <li>Errors - Writing good error messages.</li> <li>Mindset - Different software engineering mindsets.</li> <li>Naming - Achieving meaningful names in software.</li> <li>Presentations - Enhancing your presentations.</li> <li>Productivity - Common productivity guidance.</li> <li>Resources - Curated external resources and learning.</li> <li>Security - Concepts for maintaining security.</li> <li>Testing - Test methodologies and guidance.</li> </ul> <p>New content added regularly.</p>"},{"location":"api/","title":"API","text":"<p>When designing APIs, it's crucial to focus on discoverability, intuitiveness, flexibility, and simplicity.</p>"},{"location":"api/#discoverability","title":"Discoverability","text":"<p>Discoverability is about making it easy for users to find and utilise the features of your API. There are five key elements of discoverability:</p> <ul> <li>Affordances: Possible actions that users can take with your API. Good affordances are intuitive and easy to understand.</li> <li>Signifiers: Indicators that point to the affordances. In an API, good signifiers could be well-named endpoints that clearly indicate their functionality.</li> <li>Constraints: Limitations on what can be done with your API. Constraints can guide users towards correct usage.</li> <li>Mappings: Relationships between actions and outcomes. Good mappings in an API make it clear what will happen when a certain request is made.</li> <li>Feedback: Response users get after they perform an action. Good feedback in an API is informative and helps users understand the result of their actions.</li> </ul>"},{"location":"api/#tenets-of-good-apis","title":"Tenets of Good APIs","text":"<p>A well-designed API should be:</p> <ul> <li>Intuitive: It should use domain-specific language, making it easier for users familiar with the domain to understand. Clumsy naming often indicates clumsy abstractions. The API should also provide symmetry, meaning similar actions have similar interfaces.</li> <li>Flexible: It should provide sane defaults, but also allow users to customise behaviours through optional keyword arguments. It should minimise repetition, allowing users to achieve their goals with less code. In essence, a good API lets users be lazy.</li> <li>Simple: It should provide composable functions, allowing users to build more complex operations from simpler ones. It should leverage language idioms, making it feel like a natural extension of the programming language. Lastly, it should provide convenience, making common tasks easy to perform.</li> </ul> <p>By following these principles, you can create APIs that are easy to learn, use, and remember.</p>"},{"location":"api/#references","title":"References","text":"<ul> <li>The Design of Everyday APIs, Lynn Root</li> </ul>"},{"location":"business/","title":"Business","text":""},{"location":"business/#you-only-compete-with-one-thing-your-costs","title":"You only compete with one thing: Your costs","text":"<p>Avoid talk of \"competition\" within the market and focus on what you can control; your real competition - your costs.</p> <p>Make your own business work. It doesn't matter what everyone else is doing.</p>"},{"location":"business/#references","title":"References","text":"<ul> <li>You only compete with your costs, Jason Fried</li> </ul>"},{"location":"complexity/","title":"Complexity","text":"<p>Complexity is anything related to the structure of a software system that makes it hard to understand or modify the system</p> <p>Complexity manifests itself in three general ways:</p> <ul> <li>change amplification - simple change requires code modification in many places</li> <li>cognitive load - how much a developer needs to know to complete a task</li> <li>unknown unknowns - code changes to complete a task are not obvious</li> </ul> <p>Complexity is caused by:</p> <ul> <li>dependencies - occur when a given piece of code can not be modified in isolation without considering/modifiying another piece of code<ul> <li>leads to change amplification and a high cognitive load</li> </ul> </li> <li>obscurity - occur when important information is not obvious<ul> <li>creates unknown unknowns and contributes to cognitive load</li> </ul> </li> </ul> <p>Modern software systems are intrinsic with complexity, and the skill requirements that constitute full stack development are evergrowing. However, movements to revert to fundamentals - such as Radical Simplicity - appear to be gaining traction back to a leaner stack.</p>"},{"location":"complexity/#references","title":"References","text":"<ul> <li>A Philosophy of Software Design, John Ousterhout</li> <li>Radical Simplicity in Technology, Stephen Schmidt</li> </ul>"},{"location":"console/","title":"Console","text":""},{"location":"console/#the-long-and-short-of-option-names","title":"The Long and Short of Option Names","text":"<p>Reserve shorthand command-line option names for the console - where they are efficient. Always use long names in scripts. Shorthand condenses code, but at the detriment of readability and explicitness.</p> <p>While shorthand names may be intuitive when written, or to a tool expert...</p> <pre><code>radon cc -asj .\n</code></pre> <p>...long names provide a meaningful representation always for all readers.</p> <pre><code>radon cc --average --show-complexity --json .\n</code></pre>"},{"location":"console/#default-to-defaults","title":"Default To Defaults","text":"<p>Software development is famous for intense debates that distract from problem solving without achieving meaningful outcomes: single or double quotes, tabs versus spaces, best language, best framework, and so on.</p> <p>While these discussions may endure, we can reduce disagreements within teams and encourage progress.</p> <p>One strategy is following tool default settings. This ensures compliance with conventions while avoiding unnecessary complexity through customisation. We can enhance this approach by choosing highly opinionated tools, saving time and energy for more important matters.</p> <p></p>"},{"location":"console/#taking-shortcuts","title":"Taking Shortcuts","text":"<p>When we consider opportunities to optimise our workflow, we typically focus on the larger and more evident chunks of time, such as reducing the number of meetings or blocking focus time for deep work. While improving these areas is very important, it is easy to overlook micro-optimisations. We can become accustomed to suboptimal behaviours through habit or be unaware of improved methodologies. These behaviours can add up to significant productivity loss and continuously hamper our focus.</p> <p>So what can we do about it?</p>"},{"location":"console/#automate","title":"Automate","text":"<p>Automate the boring stuff</p> <p>Seek out opportunities to transform tedious manual tasks into powerful automations.</p> <p>Spend some time to filter out noise from emails, optimise your tooling, or even build an ecosystem of tools to support your development; the possibilities are limitless.</p> <p>For instance, you could automate formatting that you manually apply to maintain a clean code base, just like pyprojectsort.</p>"},{"location":"console/#alias","title":"Alias","text":"<p>Aim to do more with less. Save yourself precious keystrokes and replace long, frequent commands with an alias.</p> <p>Cumbersome commands that require tool-specific knowledge and high cognitive load...</p> <pre><code>pytest --cov-config .coveragerc --verbose --cov-report term --cov-report xml --cov=pyprojectsort tests\n</code></pre> <p>...can be greatly simplified with tools such as <code>make</code>; improving development workflows and standardising commands across projects.</p> <pre><code>make coverage\n</code></pre> <p>Having a handy set of utility aliases that simplify frequent commands can be a great way to move with speed on the command line.</p> Example: Change directory alias<pre><code>alias .. = 'cd ..'\nalias ... = 'cd ../..'\nalias .... = 'cd ../../../'\n</code></pre>"},{"location":"console/#find-a-buddy","title":"Find a Buddy","text":"<p>Continuously confide in the feedback of others. Find people that support and identify areas where you can approve - this is one of the most valuable feedback loops you can have.</p> <p>A developer can get wrapped up in their own bubble of tools and ways of working. Objective, external feedback can provide a valuable, unbiased and fresh perspective that can help break from that cycle.</p>"},{"location":"console/#get-to-know-your-tools","title":"Get to Know Your Tools","text":"<p>The tools we use are the bedrock of our development experience. Getting to know them well can keep us moving and make for a more effortless workflow.</p> <p>Despite this, many struggle with tools they use every day, such as git.</p> <p>How can you change this?</p> <p>Studies have shown using a keyboard is significantly faster compared to using a mouse. A light approach for learning keyboard shortcuts can be to set aside some time every now and then to understand them intimately. Shortcut helpers - such as Key Promoter X in PyCharm - can notify you every time you clicked through a process that has an alternative keyboard shortcut. Reading the tool documentation or following a tutorial are always good options. A more brutalist approach can be to restrict yourself completely, such as to disconnect your mouse for a week; this will force you to restrict yourself and to learn shortcuts much faster.</p>"},{"location":"console/#summary","title":"Summary","text":"<p>The next time you find yourself leaving the keyboard and reaching for your mouse, ask yourself \"Is there a way I could perform this task from the keyboard?\", find out and give it a try.</p>"},{"location":"console/#references","title":"References","text":"<ul> <li>Black - The uncompromising code formatter - Opinionated Python formatter which eliminates discussion around code formatting.</li> <li>CLI tool to correct mistakes in previous command</li> <li>Don't use short options in scripts - Anthony Sottile (@asottile)</li> <li>Oh-My-Zsh git aliases</li> <li>Physically disable your mouse for a week</li> <li>The Power of Defaults</li> <li>Zsh plugin to help remember your aliases</li> <li>Learn how to build tools - Letters to a New Developer</li> <li>Do they deserve the gift of your keystrokes - Scott Hanselman</li> </ul>"},{"location":"database/","title":"Database","text":""},{"location":"database/#database-requirements-collection-analysis","title":"Database requirements collection &amp; analysis","text":"<p>Database designers understand &amp; document the data requirements of the database users.</p> <p>Resulting data requirements must be written concisely and briefly - yet contains every detail.</p> <p>Functional requirements must also be captured.</p> <ul> <li>Consists of user-defined operations</li> </ul>"},{"location":"database/#conceptual-design","title":"Conceptual Design","text":"<p>Create conceptual schema using a high-level or conceptual data model - provides concepts close to the way how users see data.</p> <ul> <li>conceptual schema -&gt; concise description of the data requirements &amp; detailed description of the entity types, relationships and constraints<ul> <li>Do not contain implementation details</li> </ul> </li> </ul>"},{"location":"database/#logical-design","title":"Logical Design","text":"<p>Actual implementation of the database, using commercial DBMS. Transform high-level conceptual design into the implementation data model - also known as 'data model mapping'. Results in a DB schema in the implementation data model of the DBMS.</p>"},{"location":"database/#physical-design","title":"Physical Design","text":"<p>Last step. Specify internal storage structures, indexes and access paths. Along with these activities, application programs are designed, implemented as transactions corresponding to high-level transaction specification.</p>"},{"location":"database/#weak-entity-types","title":"Weak Entity Types","text":"<p>Entity Types do not have key attributes of their own. They are identified by relating to another entity type called the identifying or the owner entity type. Identifying relationship -&gt; relationship between weak entity type to its owner</p>"},{"location":"database/#relationship","title":"Relationship","text":"<p>Association among 2+ entities.</p> <p>Degree of relationship -&gt; Number of entity types that participate in a relationship</p> <ul> <li>Unary -&gt; Association with only one entity</li> <li>Binary -&gt; Association among two entities</li> <li>Ternary -&gt; Association among three entities</li> </ul>"},{"location":"database/#relationship-constraints","title":"Relationship Constraints","text":"<ul> <li>Cardinality Ratio -&gt; Maximum number of relationship instances an entity can participate in</li> <li>Participation Constraints -&gt; Specifies whether existence of an entity depends on its being related to another entity<ul> <li>Total participation -&gt; represented by double line</li> <li>Partial participation -&gt;</li> </ul> </li> </ul>"},{"location":"database/#other","title":"Other","text":"<p>Implement models with appropriate data validation</p> <p>Define type of database best suited to the data requirements and associated software to use e.g. relational database, NoSQL, etc.</p> <ul> <li>Define most appropriate database software e.g. relational PostgreSQL and MySQL; NoSQL: MongoDB, Apache Cassandra; etc.</li> </ul> <p>Define database infrastructure requirements</p> <ul> <li>Consistency level - strict (data is available to all readers on each save) or eventual (delay between writes and when data is available to reader)</li> <li>Consider whether more read or write operations are required</li> <li>Consider whether database requires sharding<ul> <li>Consider whether to shard by:<ul> <li>Feature:</li> <li>Value e.g. user base in different countries</li> <li>Hash - can be scaled through 'consistent hashing'</li> </ul> </li> </ul> </li> <li>Consider data replication requirements</li> </ul> <p>Define cache to place in front of database to optimise performance - select most appropriate software e.g Redis, Memecached, etc.</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#ten-principles-for-good-design","title":"Ten Principles for Good Design","text":"<p>Good design...</p> <ol> <li>is innovative</li> <li>makes a product useful</li> <li>is aesthetic</li> <li>makes a product understandable</li> <li>is unobtrusive</li> <li>is honest</li> <li>is long-lasting</li> <li>is thorough down to the last detail</li> <li>is environmentally friendly</li> <li>is as little design as possible</li> </ol>"},{"location":"design/#ten-usability-heuristics-for-user-interface-design","title":"Ten Usability Heuristics for User Interface Design","text":"<ol> <li> <p>Visibility of System Status</p> <p>Keep users in the loop by providing timely and relevant feedback. This helps build trust and enables users to make informed decisions about their next steps.</p> </li> <li> <p>Match Between System and the Real World</p> <p>Align with user's everyday language and experiences, promoting the transfer of skill from what people already know.</p> </li> <li> <p>User Control and Freedom</p> <p>Offer users an \"emergency exit\" to easily undo actions or leave a process, giving them control and fostering confidence.</p> </li> <li> <p>Consistency and Standards</p> <p>Use consistent terminology and follow established conventions. This minimizes user confusion and cognitive load, making your design more intuitive.</p> </li> <li> <p>Error Prevention</p> <p>Eliminate or minimize errors by designing safeguards and asking for confirmation before executing actions with serious consequences.</p> </li> <li> <p>Recognition Rather than Recall</p> <p>Minimize cognitive load by making elements and options visible, reducing the amount of information users must remember.</p> </li> <li> <p>Flexibility and Efficiency of Use</p> <p>Cater to both novice and expert users by providing shortcuts and allowing customisation to make interactions more efficient.</p> </li> <li> <p>Aesthetic and Minimalist Design</p> <p>Eliminate unnecessary elements that don't serve a functional purpose, keeping the user focused on the most important.</p> </li> <li> <p>Help Users Recognise, Diagnose, and Recover from Errors</p> <p>Provide error messages in plain language that precisely indicate the problem and suggest a solution, making it easier for users to recover.</p> </li> <li> <p>Help and Documentation</p> <p>While a design should be self-explanatory as far as possible, provide just-in-time contextual &amp; searchable documentation for users who need additional guidance.</p> </li> </ol>"},{"location":"design/#continuous-improvement-design-process","title":"Continuous Improvement Design Process","text":"<ol> <li>Challenge and refine requirements</li> <li>Try to remove part or process</li> <li>Simplify and optimise</li> <li>Accelerate cycle time</li> <li>Automate</li> </ol>"},{"location":"design/#references","title":"References","text":"<ul> <li>TigerBeetle Style Guide</li> <li>Ten Principles for Good Design by Dieter Rams</li> <li>Nielsen, Jakob (2005), Ten usability heuristics</li> <li>Starbase Tour with Elon Musk, Everyday Astronaut</li> <li>Iteration at SpaceX, GitLab Handbook</li> </ul>"},{"location":"errors/","title":"Errors","text":"<p>A good error message should make it self-evident</p> <ul> <li>what the user did</li> <li>what the acceptable inputs are</li> <li>how to fix the problem</li> </ul> <pre><code>ConfigError: can't find 'ffprobe' to extract video metadata; have you run `brew install ffmpeg`\n</code></pre> <p>...rather than...</p> <pre><code>FileNotFoundError: [Errno 2] No such file or directory\n</code></pre>"},{"location":"errors/#references","title":"References","text":"<ul> <li>Error-Message Guidelines, Tim Neusesser and Evan Sunwall</li> <li>Exceptionally Tricky: Good errors in bad situations, Alistair Lynn</li> </ul>"},{"location":"growth/","title":"Growth","text":"<ul> <li>\ud83e\udd17 Actively seek out and embrace learning opportunities</li> <li>\ud83d\ude4b\u200d\u2640\ufe0f Take responsibility for your progress</li> <li>\ud83e\uddd8\u200d\u2642\ufe0f Focus on depth</li> <li>\ud83e\udd4a Fight imposter syndrome</li> <li>\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Seek answers independently first</li> <li>\u231b\ufe0f Know when to ask for help</li> <li>\ud83d\udc49 Know what to ask</li> <li>\ud83d\udcaa Asking questions is a strength</li> <li>\ud83d\udcf0 Make growth and progress visible</li> <li>\ud83d\udc6b Bring others along for the ride</li> <li>\ud83e\udd1d Build supportive relationships</li> <li>\ud83e\udd32 Help others</li> </ul>"},{"location":"growth/#helping-others-grow","title":"Helping others grow","text":"<ul> <li>Provide positive, personable, timely feedback</li> <li>Be patient</li> <li>Consider why they might be struggling</li> <li>Explain in different ways</li> <li>Offer different resource formats</li> <li>Find what suits their learning style</li> <li>Encourage to solve problems independently</li> <li>Suggest challenges</li> <li>Acknowledge it's hard</li> <li>Encourage exploration</li> <li>Be there when they need you</li> <li>Aim for tangible wins to avoid overwhelming</li> <li>Gradually increase complexity</li> <li>Help them see and share their growth</li> <li>Celebrate accomplishments</li> <li>A little encouragement goes a long way</li> </ul>"},{"location":"growth/#questions","title":"Questions","text":"<p>Helpful questions to ask others to support growth.</p> <ul> <li>Are there any common mistakes you see engineers make and how can I avoid them?</li> <li>How do you approach debugging when things aren't working as expected?</li> <li>How do we prioritise tasks when everything feels urgent?</li> <li>Are there habits or practices that have helped you level up in your career?</li> </ul> <p>Questions to ask yourself to support growth.</p> <ul> <li>Am I taking the time to learn from my mistakes and finding ways to do better next time?</li> </ul>"},{"location":"growth/#references","title":"References","text":"<ul> <li>https://github.blog/developer-skills/career-growth/how-to-thrive-as-a-junior-engineer-tips-and-insights/</li> </ul>"},{"location":"laws/","title":"Laws","text":""},{"location":"laws/#conways-law","title":"Conway's Law","text":"<p>Organisations which design systems are constrained to produce designs which are copies of the communication structures of these organisations.</p> <p>The behaviours of the people in organisations, and the technology they come to build, will mirror those behavioural conversations and constructs.</p>"},{"location":"mindset/","title":"Mindset","text":""},{"location":"mindset/#software-design","title":"Software Design","text":"<p>In terms of software design, there are two overarching approaches:</p> <ul> <li>tactical - focus to get something working, such as a feature or bug fix<ul> <li>nearly impossible to produce a good system design</li> <li>initially deliver faster, but the time saved is quickly given back as development slows - technical debt builds up quickly</li> <li>Adoptee: Facebook, with their motto \"Move fast and break things\"</li> </ul> </li> <li>strategic - focus to produce a great design, which also happens to work<ul> <li>working code is not considered enough</li> <li>initially deliver slower, but the cost of this investment becomes free as development accelerates</li> <li>Adoptee: Google, with heavy emphasis on high quality code and good design</li> </ul> </li> </ul>"},{"location":"mindset/#small-ahas","title":"Small Ahas","text":"<p>An aha is a an expression of satisfaction, triumph or surprise. An experiment discovering what works or needs improvement; rapidly learning what will produce the desired outcome.</p> <p>A small aha differs from the lean manufacturing notion of a 'small batch'. While a small batch emphasises speed for completing work, a small aha emphasises speed to discovery.</p> <p>A \"small aha\" requires:</p> <ul> <li>Speed - we arrive at an aha as fast as possible</li> <li>Learning - every aha helps us learn and adapt</li> <li>Safety - we are safe to succeed or fail as we learn</li> </ul> <p>It is an implementation technique for living the motto \"Outcomes Over Outputs\". The focus is on discovering how to deliver a key outcome over simply reporting on work completed. It makes us adaptive and keeps us in a continous state of flow to accomplish important outcomes.</p>"},{"location":"mindset/#assessing-new-technologies","title":"Assessing New Technologies","text":"<p>Ask questions to keep conversation rounded and realistic.</p> <ol> <li>Does it solve a real meaningful problem? What are the core tenets? What are your core problems and does it solve them?</li> <li>Does it change the way you work? Can you do something a lot faster? Or maybe something you don't need to do anymore?</li> <li>Does it create new problems? Maybe as its faster, creates more work and that requires a lot more insight to discern. Maybe makes one thing faster and another slower.</li> <li>Does it work securely and reliably? e.g. not dumping IP into an LLM; hallucinations, etc.</li> <li>When things break, is it clear what steps need to be taken? Do you have the right people, do you have the resources you need, is it something you can reason about it? If you blindly trust a technology, what will you do when it stops working?</li> </ol>"},{"location":"mindset/#references","title":"References","text":"<ul> <li>\ud83d\udcd6 A Philosophy of Software Design, John Ousterhout</li> <li>\ud83c\udfa5 Redefining Test Automation: A New Perspective, Joe Colantonio</li> <li>\ud83c\udf0e Small Ahas, Joshua Kerievsky</li> </ul>"},{"location":"naming/","title":"Naming","text":"<p>Is it a bird? Is it a plane? No! It's a... var_1?!</p> <p>As famously quipped by Phil Karlton, 'There are only two hard things in Computer Science: cache invalidation and naming things'.</p> <p>Naming can indeed be a subject of much debate due to its subjective nature and room for interpretation. However, while it takes time to choose meaningful names, the clarity it brings makes it a worthwhile endeavour.</p> <p>Here are some guidelines to help you achieve meaningful names:</p> <ul> <li>Prioritise clarity and avoid ambiguity. Names should be descriptive and explicit.</li> <li>Maintain consistency. Strive to follow established conventions.</li> <li>Use pronounceable and searchable words. Programming is a collaborative effort, and others may need to discuss or locate your code.</li> <li>Use 'explanatory variables', separating complex statements into smaller, named pieces of code - improving comprehension.</li> <li>Avoid redundant context<ul> <li>Refrain from using <code>Base</code> or <code>Abstract</code> i.e. use <code>Student</code> instead of <code>AbstractStudent</code>.</li> <li>Include units in names, such as <code>delaySeconds</code>, unless the type already implies it - such as <code>delay</code> for a datetime object, rather than <code>delayDatetime</code>.</li> </ul> </li> <li>A long, descriptive name is better than a name that is short and ambigious.<ul> <li>Long names can impact horizontal scrolling and make it harder to analyse associate code at a glance. This can however hint that code design can be improved.</li> <li>Avoid abbreviations and types.</li> <li>Follow the Single Truth Rule, using expressive naming \"The compiler should use the same variable to represent the same single true meaning that the human reader understand\" where a comment may have been used as mitigation for poor naming. If a comment says what the code could say, change the code.</li> </ul> </li> <li>If you find yourself creating <code>utils</code> or <code>helpers</code>, reconsider their placement. Difficulty in naming might signal a need for code restructuring.</li> </ul>"},{"location":"naming/#favour-from-over-to","title":"Favour 'from' over 'to'","text":"<p>When converting or translating values, using <code>_to_</code> within function names is common.</p> <p>However, this tends to separate naming from usage, fragmenting the flow for the reader.</p> <pre><code>def html_to_pdf(html):\n    ...\n\npdf = html_to_pdf(\"file.html\")\n</code></pre> <p>Alternatively, using <code>_from_</code> keeps related names closer: with the output described closest to assignment, and with the input described closest to the argument.</p> <pre><code>def pdf_from_html(html):\n    ...\n\npdf = pdf_from_html(\"file.html\")\n</code></pre> <p>This aligns closely with the functional programming idiom of naming the function after the result it produces.</p>"},{"location":"naming/#references","title":"References","text":"<ul> <li>Do's and Don'ts of Commenting</li> <li>Meaningful Names, Chapter 2 - Clean Code, Tim Ottinger</li> <li>Meaningful Names Revisited, Tim Ottinger</li> <li>Rules for Commenting Code, Ruthlessly Helpful, Stephen Ritchie</li> <li>Self-documenting Code</li> <li>Small Naming Tip: Use \"from\" Instead of \"to\" in Function and Variable Names, Lesley Lai</li> </ul>"},{"location":"presentations/","title":"Communication","text":"<p>Keep your communication clear, simple, and make sure progress, blockers, and decisions are easy to track.</p>"},{"location":"presentations/#improve-your-technical-showcase","title":"Improve your technical showcase","text":"<p>Utilise keystroke rendering tools to provide visibility of every action, improving demonstration, accessibility and pair programming experiences.</p> <p>Transforming this...</p> <p></p> <p>...into this:</p> <p></p> <p>These tools are available at operating system level - such as KeyCastr on MacOS or KeyPos\u00e9 on Windows; and from within your IDE - Such as Screencast Mode in Visual Studio Code or Presentation Assistant in JetBrains IDEs.</p>"},{"location":"presentations/#references","title":"References","text":"<ul> <li>How to speak, MIT, Patrick Winston</li> <li>https://github.blog/developer-skills/career-growth/how-to-thrive-as-a-junior-engineer-tips-and-insights/</li> </ul>"},{"location":"productivity/","title":"Productivity","text":""},{"location":"productivity/#333-method","title":"3/3/3 Method","text":"<p>From Oliver Burkeman. Do these Daily:</p> <ul> <li>Spend 3 hours working on an important project.</li> <li>Complete 3 shorter urgent tasks or meetings.</li> <li>Do 3 maintenance tasks to keep life running smoothly.</li> </ul>"},{"location":"productivity/#cult-of-done-manifesto","title":"Cult of Done Manifesto","text":"<ol> <li>There are three states of being. Not knowing, action and completion.</li> <li>Accept that everything is a draft. It helps to get it done.</li> <li>There is no editing stage.</li> <li>Pretending you know what you're doing is almost the same as knowing what you are doing, so just accept that you know what you're doing even if you don't and do it.</li> <li>Banish procrastination. If you wait more than a week to get an idea done, abandon it.</li> <li>The point of being done is not to finish but to get other things done.</li> <li>Once you're done you can throw it away.</li> <li>Laugh at perfection. It's boring and keeps you from being done.</li> <li>People without dirty hands are wrong. Doing something makes you right.</li> <li>Failure counts as done. So do mistakes.</li> <li>Destruction is a variant of done.</li> <li>If you have an idea and publish it on the internet, that counts as a ghost of done.</li> <li>Done is the engine of more.</li> </ol>"},{"location":"productivity/#eat-the-frog","title":"Eat the Frog","text":"<p>Do your hardest task first. The rest will be easier.</p> <p>\"If it's your job to eat a frog, it's best to do it first thing in the morning. And if it's your job to eat two frogs, it's best to eat the biggest one first.\" - Mark Twain</p>"},{"location":"productivity/#eisenhower-matrix","title":"Eisenhower Matrix","text":"<pre><code>quadrantChart\n    x-axis Urgent --&gt; Not Urgent\n    y-axis Not Important --&gt; Important\n    quadrant-1 Schedule it\n    quadrant-2 Do it\n    quadrant-3 Delegate it\n    quadrant-4 Eliminate it</code></pre>"},{"location":"productivity/#pomodoro-technique","title":"Pomodoro Technique","text":"<ol> <li>List your tasks</li> <li>Set a 25 minute timer</li> <li>Focus and work</li> <li>Take a 5 minute break</li> <li>Repeat 4 times, then break for longer</li> </ol>"},{"location":"productivity/#seinfeld-strategy","title":"Seinfeld Strategy","text":"<ol> <li>Set your goal</li> <li>Mark a calendar each day you do it</li> <li>Keep the streak as long as you can</li> <li>Never miss 2 days in a row</li> </ol>"},{"location":"productivity/#time-blocking","title":"Time Blocking","text":"<ol> <li>Identify what needs doing</li> <li>Group similar activities together</li> <li>Assign time slots for tasks</li> <li>Plot blocks on a calendar</li> <li>Stick to the schedule</li> <li>Take breaks between blocks</li> <li>Make changes if needed</li> </ol>"},{"location":"productivity/#5-hour-rule","title":"5 Hour Rule","text":"<p>Devote one hour a day, five days a week, to learning something new.</p>"},{"location":"productivity/#pal-meetings","title":"PAL Meetings","text":"<ul> <li>Purpose: Determine the purpose of the meeting and make sure everyone understands it.</li> <li>Agenda: Circulate the topics to be covered in service of that purpose.</li> <li>Limit: Set guidelines for how long the meeting and agenda items will take.</li> </ul>"},{"location":"productivity/#10-rules-for-good-remote-meetings","title":"10 Rules for Good Remote Meetings","text":"<ol> <li>Question whether the meeting should happen in the first place</li> <li>Cancel unnecessary meetings</li> <li>Make meeting attendance optional and record meetings to encourage asynchronous participation</li> <li>Start on time and end on time with the \"speedy meetings\" setting in Google Calendar</li> <li>Ensure every meeting has an agenda - \"no agenda, no attenda\"</li> <li>Document everything live in the agenda notes</li> <li>Use the right tools</li> <li>Avoid hybrid calls (in-person and online) to level the playing field</li> <li>Unique surrounding should be celebrated, no need to have your background look 'professional'</li> <li>Empower team members to be the manager of their attention; it's okay to work on other tasks if a particular portion of a meeting doesn't apply to you</li> </ol>"},{"location":"productivity/#getting-in-the-flow","title":"Getting in the flow","text":"<p>The nine dimensions of flow are:</p> <ol> <li>Challenge-skills balance</li> <li>Total concentration</li> <li>Clear goals</li> <li>Immediate feedback</li> <li>Transformation of time</li> <li>Feeling intrinsically rewarded</li> <li>Effortless</li> <li>Loss of self-consciousness</li> <li>Feeling of total control</li> </ol> <p>The follow actions can help achieve a flow state:</p> <ol> <li>Optimise your environment    a. Block focus time    b. Schedule breaks    c. Snooze Slack and phone notifications    d. Eliminate or reduce multitasking    e. Invest in noise-cancelling headphones    f. Get comfortable    g. Be mindful of meeting frequency when scheduling    h. Create a pre-flow ritual that cues your brain for work</li> <li>Map out your work<ul> <li>Have a clear path for accomplishing your goal</li> <li>Strive for a good balance of challenging work - not too easy or too stressful</li> </ul> </li> <li>Find joy in the work you're doing<ul> <li>Clearly articulating outcomes can increases motivation to take on work and do it quickly</li> <li>Rethink why your doing a piece of work in the first place if not enjoyable</li> </ul> </li> </ol>"},{"location":"productivity/#goal-prioritisation","title":"Goal Prioritisation","text":"<p>Write down today's date and 10 goals you would like to achieve in the next 12 months in the present tense e.g. I earn, I achieve, I own. Take that list and identify which item would have the greatest positive impact. Then follow these 7 steps:</p> <ol> <li>Transfer that item to a clean sheet of paper</li> <li>Write it down</li> <li>Set a deadline</li> <li>Make a list of everything you must do to accomplish it</li> <li>Organise the list into a checklist</li> <li>Take action</li> <li>Do something every day</li> </ol>"},{"location":"productivity/#references","title":"References","text":"<ul> <li>\ud83d\udcd6 12 Week Year - Brian P. Morgan</li> <li>Bre Pettis and Kio Stark, Cult of Done Manifesto, 2009</li> <li>How to fix everything that's wrong with your meetings, Kathleen Davis</li> <li>10 ways to do remote meetings right, Sid Sijbrandij</li> <li>[Flow: The Psychology of Optimal Experience] by Mihaly Csikszentmihalyi</li> <li>How to get in the flow while coding (and why it\u2019s important)</li> <li>The Productivity Paradox: Unveiling the Difference Between Being Productive and Being Busy, 17 Oct 2023 - CPI</li> </ul>"},{"location":"quotes/","title":"Quotes","text":"<p>What is well conceived is clearly said, and the words to say it come easily - Nicholas Boileau</p> <p>Having a clear-headed - somewhat black and white - concept of, our goal is this measurable thing - \u2026you can get a clear sense of \u2018Are we raising it or not?\u2019\u2026 there\u2019s less dispute about that; and so\u2026 our context is demonstrably better at that thing we agree is important; then a lot of the emotional arguments start to evaporate. - Tim Ottinger</p>"},{"location":"quotes/#references","title":"References","text":"<ul> <li>\ud83d\udcfd\ufe0f Agile Otter (Tim Ottinger) on why most devs work in the worst ways possible</li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>List of useful software engineering resources</p>"},{"location":"resources/#blogs","title":"Blogs","text":""},{"location":"resources/#personal","title":"Personal","text":"<ul> <li>Andrej Karpathy - Was director of AI @Tesla and on founding team of @OpenAI.</li> <li>Anthony Shaw - Blog from a Python Advocacy Lead at Microsoft.</li> <li>Charlie Marsh - Founder of Astral and creator of Ruff, an extremely fast Python linter, written in Rust.</li> <li>Dan Luu - Understandable explanations of technical topics.</li> <li>Dan Moore - Letters To A New Developer - What I wish I had known when starting my development career.</li> <li>Fabrizio Ferri Benedetti - Technical writing blog</li> <li>Jason Fried - Co-Founder and CEO at 37signals.</li> <li>Jim Grey - Software management.</li> <li>Joel Spolsky - Joel on Software - Software blog.</li> <li>Matt Wynne - Blog from the co-founder of Cucumber Limited.</li> <li>Monica Powell - Software engineer, content creator &amp; community organiser.</li> <li>Paul Graham - Co-founder of the startup accelerator and seed capital firm Y Combinator.</li> <li>Tim Ottinger - Programmer, author, manager, trainer, consultant, and coach. His style is practical and hands-on, anchored in agile and traditional practices.</li> </ul>"},{"location":"resources/#software-blogs","title":"Software Blogs","text":"<ul> <li>Engineering Leadership - Weekly newsletter for becoming a great engineering leader. By Gregor Ojstersek.</li> <li>Real Python - Python tutorials for developers of all skill levels, Python books and courses, Python news, code examples, articles, and more.</li> <li>Spotify Research - Spotify's official research blog.</li> <li>The Caring Techie Newletter - The people skills you need to turn your potential into performance in Tech. Lessons from Google, Uber, and startups.</li> <li>The Conscious Leader - Carve your path to exceptional engineering leadership. Blend technical skills with emotional intelligence. It's where the top 10% are made. By Taha Hussain.</li> <li>The GitHub Blog - Updates, ideas, and inspiration from GitHub to help developers build and design software.</li> <li>The Overflow - Essays, opinions, and advice on the act of computer programming, from Stack Overflow.</li> <li>The Pragmatic Engineer - Observations across the software engineering industry.</li> <li>The ReadME Project - The ReadME Project amplifies the voices of the open source community: the maintainers, developers, and teams whose contributions move the world forward every day.</li> </ul>"},{"location":"resources/#engineering-blogs","title":"Engineering Blogs","text":"<ul> <li>AWS Architecture</li> <li>Discord Engineering</li> <li>Dropbox Engineering</li> <li>GitHub Engineering</li> <li>Google Testing</li> <li>Meta Engineering</li> <li>Netflix Tech Blog - Learn about Netflix\u2019s world class engineering efforts, company culture, product developments and more.</li> <li>Pinterest Engineering - Inventive engineers building the first visual discovery engine, 300 billion ideas and counting.</li> <li>Spotify Engineering - Spotify's official technology blog.</li> <li>Stripe Engineering</li> <li>Twitter Engineering</li> <li>Uber Engineering</li> </ul>"},{"location":"resources/#books","title":"Books","text":"<ul> <li>14 Habits of Highly Productive Developers - Zeno Rocha</li> <li>97 Things Every Software Developer Should Know - Kevlin Henney</li> <li>A Philosophy of Software Design - John Ousterhout</li> <li>Accelerate - Nicole Forsgren, Jez Humble and Gene Kim</li> <li>Beyond Entrepreneurship, James C. Collins</li> <li>Clean Architecture - Robert C. Martin</li> <li>Clean Architectures in Python - Leonardo Giordani</li> <li>Clean Code - Robert C. Martin</li> <li>Coach Wooden's Leadership Game Plan for Success - John Wooden</li> <li>Continuous Delivery - Christie Wilson</li> <li>Effective Software Testing - Mauricio Aniche</li> <li>Escape Velocity - Better Metrics for Agile Teams - Doc Norton</li> <li>Extreme Ownership - Jocko Willink and Leif Babin</li> <li>Fluent Python - Luciano Ramalho</li> <li>Fundamentals of Software Architecture - Neal Ford</li> <li>Kill It With Fire - Marianne Bellotti</li> <li>Legacy Code: First Aid Kit - Nicolas Carlo</li> <li>Lizard Optimization - Gojko Adzic</li> <li>The Concise Mastery - Robert Greene</li> <li>Software Abstractions - Daniel Jackson</li> <li>Software Design X-Rays - Adam Tornhill</li> <li>Software Engineering - Ian Sommerville</li> <li>Refactoring - Martin Fowler</li> <li>The BDD Books - Discovery: Explore behaviour using examples - G\u00e1sp\u00e1r Nagy and Seb Rose</li> <li>The BDD Books - Formulation: Document examples with Given When Then - G\u00e1sp\u00e1r Nagy and Seb Rose</li> <li>The Design of Everyday Things - Don Norman</li> <li>The E-Myth Revisited - Michael E. Gerber</li> <li>The Lean Startup - Eric Ries</li> <li>The Manager's Path - A Guide for Tech Leaders Navigating Growth &amp; Change - Fournier</li> <li>The Pragmatic Programmer - David Thomas and Andrew Hunt</li> <li>The Staff Engineer's Path - Reilly</li> <li>The Software Craftsman - Sandro Mancuso</li> <li>The Software Engineer's Guidebook - Gergely Orosz</li> <li>The Unaccountability Machine - Dan Davies</li> <li>Your Code As A Crime Scene - Adam Tornhill</li> </ul>"},{"location":"resources/#guides","title":"Guides","text":"<ul> <li>Agile Manifesto</li> <li>Amazon Principal Engineering Community Tenets - guiding principals focused on achieving the company mission and vision.</li> <li>Calmcode - short, simple, video tutorials for modern ideas and open source tools.</li> <li>GitLab University - Everything you need to know about DevSecOps</li> <li>Google Engineering Practices - General engineering best practices at Google</li> <li>Khan Academy Engineering Career Development - Engineering career guidance and feedback.</li> <li>MDN Web Docs - Information about Open Web technologies including HTML, CSS, and APIs for both Web sites and progressive web apps.</li> <li>Ninedots - Guides and downloadable resources for candidates looking to amp up their preparation.</li> <li>Python Developer Tooling Handbook - understand the ecosystem of tools used to make Python development easier and more productive.</li> <li>Scientific Python - Guidance for those making or maintaining a package and wanting to follow modern best practices in Python.</li> <li>Software Craftsmanship Manifesto</li> <li>Susie - Provides interesting knowledge for developers regarding sustainable software development.</li> <li>The Good Docs Project - Best practice templates and writing instructions for documenting open source software.</li> <li>The Odin Project - The Odin Project empowers aspiring web developers to learn together for free.</li> <li>The Twelve-Factor App - Methodology for building software-as-a-service apps</li> </ul>"},{"location":"resources/#design","title":"Design","text":"<p>Design inspiration.</p> <ul> <li>Information is beautiful - turn information and knowledge into interactive graphics, stories, live performances and books.</li> </ul>"},{"location":"resources/#podcasts","title":"Podcasts","text":"<ul> <li>Command+Shift+Left - Navigate the treacherous waters of the software development, ops, and security world, while also diving into the hot current trends in the industry.</li> <li>Software Engineering Radio - The podcast for professional software developers.</li> <li>The Changelog Podcast</li> <li>The README Podcast - Your favourite open source projects, and the developers who make them happen. Listen in.</li> <li>The Stack Overflow Podcast</li> </ul>"},{"location":"resources/#tutorials","title":"Tutorials","text":"<ul> <li>Web Development for beginners</li> <li>IoT for beginners</li> </ul>"},{"location":"security/","title":"Security","text":""},{"location":"security/#dependency-confusion","title":"Dependency Confusion","text":"<p>\"dependency confusion\" is a supply chain exploit where a hacker provides their malicious package with the same name as a genuine package and uploads it to a public repository in the hope that it's accidentally downloaded. If successful, the hacker will have access to arbitrary code execution, potentially allowing them full access to sensitive data or enabling them to damage production services.</p> <p>To prevent this exploit, ensure all dependencies are:</p> <ul> <li>\"pinned\" to a specific version</li> <li>\"pinned\" to a hash of a version's contents</li> <li>Pulled from a single secure server<ul> <li>Mirrored to the server if they are public</li> </ul> </li> </ul> <p>One researcher was even able to hack 35 tech firms using this exploit.</p>"},{"location":"security/#remediation-example","title":"Remediation Example","text":"<p>For Python dependencies, using a private PyPi server in combination with the public PyPi poses a number of security risks.</p> <p>Do not use \"pip --extra-index-url\". It does not honour any ordering of whether to prioritise packages from the private or public PyPi server for name collisions.</p> <p>Do:</p> <ul> <li>Use a single server endpoint that manages priorities on the backend<ul> <li>Artifactory supports virtual repositories that allow you to use a single endpoint that \"virtually\" dispatches to an appropriate backend repository, including features like prioritisation. That means you can configure Artifactory to always prioritise private repositories.</li> </ul> </li> <li>Mirror public packages to your private PyPi</li> <li>Tie dependency installation to a hash of the contents rather than just the name and version of the package<ul> <li>Even if the name and package are the same, if any contents are different than expected, installation will fail. This can be done with tools like <code>pip-tools</code> and <code>poetry</code>.</li> </ul> </li> <li>Consider \"squatting\" a similarily named package on PyPi (creating an empty package to prevent others pushing malicious packages to that namespace), however this is not endorsed by the PyPi organisation and empty packages can be removed.<ul> <li>It also exposes your package names and naming conventions - which provides more information to attackers e.g. they could try the same naming conventions on a different unprotected package repository, such as <code>npm</code>.</li> </ul> </li> </ul>"},{"location":"security/#email","title":"Email","text":"<p>When signing up for a service, include the site name in your email address e.g. <code>email+site@gmail.com</code>. If you receive any spam over that address, you will know that they sold your data, and you can more easily filter out and identify spam emails against that address.</p>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#unit-testing","title":"Unit Testing","text":"<p>A good unit test should be:</p> <ul> <li>idempotent - can be run over and over and is always green</li> <li>atomic - not dependent on other tests and can be executed in any order in a test suite</li> <li>fast - run quickly so it does not slow the development process. All unit test dependencies should be mocked</li> <li>meaningful title - explains what is being tested e.g. testWhenShould pattern</li> <li>split into AAA - Arrange (setup), Act (execute), Assert (validate); also known as Given, When, Then OR Context, Action, Outcome</li> </ul> <p>Otherwise our tests will become flaky; and will end up being flagged with an ignore tag or commented/deleted from the codebase altogether.</p> <p>Not mocking might be okay (debatable) for ORM heavy apps where we can launch a database in memory as this may lead to a more accurate test by relying on actual database data and operations rather than ORM mocks.</p> <pre><code>&lt;testWhenShould&gt; (\n  // setup\n  dependencyOne = mockDependencyOne.return({...});\n  dependencyTwo = mockDependencyTwo.return({...});\n  objectToTest - new ObjectToTest(dependencyOne, dependencyTwo);\n\n  // execute\n  result = objectToTest.someFunc();\n\n  // validate\n  assertEquals(result, expectedResult);\n)\n</code></pre> <p>Once you fix a bug, check why the previous unit tests did not uncover it and update them accordingly.</p>"},{"location":"testing/#root-cause-analysis","title":"Root Cause Analysis","text":"<p>Root cause analysis is a process for sifting through available information to determine what's really causing a problem in order to find a solution.</p> <p>Start by ascertaining:</p> <ul> <li>Who does the problem affect?</li> <li>What harm does it cause?</li> <li>Can that harm be mitigated?</li> <li>What is the business impact if the issue is not addressed?<ul> <li>How long before that happens?</li> </ul> </li> </ul> <p>Then move onto the analysis, using one of the following processes:</p> <ul> <li>Five Whys - Ask \"Why\" five times, getting deeper towards the root cause with each iteration</li> <li>Fishbone Analysis<ul> <li>Start with the problem statement and a horizontal line leading up to it</li> <li>Brainstorm the major categories of possible causes by asking \"Why does this problem occur?\" several times. Add them to the fishbone arrangment</li> <li>Ask the same question for each category, giving you subcategories and smaller fishbones</li> <li>Repeat the process, pushing for more potential causes in each category until the team runs out of ideas</li> <li>When finished, use a blind vote to agree on the one suggestion that the group believes to be the true root cause</li> </ul> </li> </ul> <p>Through this process, a root cause can be determined which will inform the required solution.</p>"},{"location":"testing/#behaviour-driven-development","title":"Behaviour Driven Development","text":"<p>It is critical that tests written in a domain language are not done so in isolation, and that there is a mixture of technical and non-technical members present. This is where we typically apply a Three Amigos approach with three distinct roles present in the authoring process. The roles are often a Business-Analyst/Product-Owner, a developer and a tester.</p> <p>Why is a Three Amigos approach so important for writing good quality Tests in a domain language?</p> <p>Each stakeholder brings unique perspectives. Without these sessions, we prevent the test representing a common understanding, and key opportunities are missed to thrash out and expose those differences.</p> <p>For example, Scenarios written by non-technical team members very often can't be automated without being changed. Once that happens, the test stops being the thing the Product Owner believed in. Further, the technical members can become viewed as 'implementers' who automate and develop deliverables, rather being part of the formulation process.</p> <p>Similarly, if technical members write the tests in isolation without input from the Product Owner, the tests can very quickly become too low-level and difficult to understand.</p> <p>The three roles bring balance in finding an appropriate scope for the test.</p> <p>Shared ownership is really important. If the Tester or Developer modify the tests in isolation without input from the Product Owner, authoring tests very quickly becomes a task consigned to technical members; and visa-versa.</p>"},{"location":"testing/#gherkin","title":"Gherkin","text":"<p>After familiarising yourself with the Gherkin Reference documentation, you should have a solid understanding of how to write tests with correct syntax.</p> <pre><code>Feature: Gherkin\n\n  Scenario: Authoring tests in Gherkin\n    Given I am working on an exciting new feature\n    When I author my tests in Gherkin\n    Then my tests are &lt;value&gt;\n\n    Examples:\n      | value          |\n      | atomic         |\n      | maintainable   |\n      | reusable       |\n      | standardised   |\n      | traceable      |\n      | understandable |\n      | awesome!       |\n</code></pre>"},{"location":"testing/#common-value-in-examples-column","title":"Common value in examples column","text":"<p>Watch out for the pitfalls of including unnecessary data in Scenario Outline examples. With a value that's common across examples, you can simply include it within the test step itself. This will reduce the volume of your test, improving maintainability.</p>  Before   After  <pre><code>Given I have &lt;quantity&gt; pieces of &lt;food&gt;\n...\n\nExamples:\n  | quantity | food     |\n  |       10 | gherkin  |\n  |       10 | pickle   |\n</code></pre> <pre><code>Given I have 10 pieces of &lt;food&gt;\n...\n\nExamples:\n  | food     |\n  | gherkins |\n  | pickles  |\n</code></pre>"},{"location":"testing/#meaningful-steps","title":"Meaningful steps","text":"<p>Just as the guidance on meaningful names suggests, aim for clarity when defining steps. This is often an outcome of Three Amigos sessions. However, always consider how an external audience or future reader might interpret them.</p>  Before   After  <pre><code>Given I have logged in to the \"BMS\"\n# Understanding `BMS` is reliant on external context\n...\n</code></pre> <pre><code>Given I have logged in to the \"Building Management System\"\n# The meaning is definitive\n...\n</code></pre>"},{"location":"testing/#behave","title":"Behave","text":"<p>Behave is a Python-based test automation framework for behaviour driven development which executes against gherkin tests.</p> <p>A Behave step definition contains four key components:</p> <ul> <li>a decorator: defining which gherkin keywords a definition is compatible to run with e.g. given, when, or then</li> <li>a pattern: matching text used within steps</li> <li>a function: containing the automation implementation</li> <li>a context: passing global data to our step definition</li> </ul> <pre><code>@decorator('pattern')\ndef function(context):\n    ...\n</code></pre> <p>Parameters can be passed to step definitions. The upcoming step matches a subsequent step definition that is compatible only with 'given' steps. It specifically accepts integers as a parameter, representing the number of cucumbers.</p> <pre><code>Given I have 5 cucumbers\n</code></pre> <pre><code>@given('I have {cucumbers:d} cucumbers')\ndef step_implementation(context, cucumbers: int):\n    if not context.cucumbers &gt; 0:\n        raise ValueError(\"Must at least have a cucumber\")\n</code></pre> <p>With a Behave setup, configuration is typically defined in an <code>environment.py</code> module. Beyond settings, this module can be used to apply Behave hooks - which can execute code before and after different phases of a test run; such as on test run, tags, features, scenarios and steps.</p> <p>The sample environment module below includes two print statements. These can be replaced with environment setup and teardown operations, which are executed before and after each test run.</p> <pre><code>def before_all(context):\n    print(\"Setting up environment...\")\n\ndef after_all(context):\n    print(\"Tearing down environment...\")\n</code></pre>"},{"location":"testing/#test-automation-manifesto","title":"Test Automation Manifesto","text":"<p>Consider writing your own test automation manifesto; a living document in a common language that describes the foundational elements that will lead to success. Represents a distillation of our values and attributes that we all agree as our practices. Start from the ground up - beginning with the end in mind.</p>"},{"location":"testing/#values","title":"Values","text":"<ol> <li>Focus on business value over test coverage - know why you are doing it</li> <li>Be the conscience of the team over sticking with the status quo - always look for ways to improve; not doing something a certain way because its always been done that way - ensure you are effective and efficient</li> <li>Check that things work for customers instead of \"works on my machine\" - achieve parity with user experience while balancing efficiency and costs</li> <li>Fast and reliable feedback - testing while acting similar to business analysts; having feedback loops with customers</li> </ol>"},{"location":"testing/#attributes","title":"Attributes","text":"<p>Fundamental pillars that prop up the success of a team. Vendor agnostic. Context free. Fundamental stable stakes that everybody practices and has at their disposal.</p> <ol> <li>Team and culture e.g. skills, commitment to quality &amp; testability, pick right tools for the job. Right people, right motivation, right mindeset; buy-in from leadership. Hardest to get right; funding &amp; support for education, focusing on open source, paying for licences for commercial off the shelf tools or some conbination of the two. Takes time to grow and nurture. The teams that have done the most widely successful things with test automation.</li> <li>Robust test framework e.g. simple authoring, aligned with team skills, that is maintainable and reusable. Show up and meet them where they are; create building blocks for tooling ideally in the language they're in or making it so that if its not something they are familiar with that there is good onramps in a way that is maintainable and reusable; so easy for people to keep working and solve the problem once and not have everyone else have to solve it as well.</li> <li>Stable and scalable test infrastructure e.g. fast execution at scale, executed across browsers &amp; devices, with stability baked-in. Scaling horizontally (as fast as possible across as many browsers and devices as possible) and vertically (across different platforms, operating systems, etc.).</li> <li>Reporting and analytics e.g. easily identify flaky tests, see results in real time, efficient selection &amp; prioritisation of tests. Bake in reliability such as self-healing locators. Quarantine and identify flaky tests for triage.</li> <li>Test data &amp; isolation e.g. ability to mock services/systems, generate test data, and create deterministic outcomes, with minimum dependencies between tests &amp; systems. Being able to simulate a situation if you catch a bug to reporduce, etc. Generating test data and being able to test in isolation to scale.</li> </ol>"},{"location":"testing/#test-automation-scorecard","title":"Test Automation Scorecard","text":""},{"location":"testing/#maintainability","title":"Maintainability","text":"<p>How easily a test script or suite can be updated or modified to changes in the software under test; how clear and understandable for users.</p> <p>Well structured, follows good coding practices, well-documented, can be readily understand and updated - reducing time and effort for its upkeep.</p> <ul> <li>Readability - If tests aren't readable, they won't be maintainable. You spend more time reading than writing scripts.</li> <li>Modular Code - Breaking test scripts into small manageable functions that can be easily reused.</li> </ul>"},{"location":"testing/#is-it-relevant-to-the-business","title":"Is it relevant to the business?","text":"<p>Degree to which the tests align with and validate the business requirements and objectives. Ensuring functionality test is meaningful to end users, contributes to overall business goals; and catching any deviations affecting business goals or user experience. Underscores importance of prioritising test automation efforts on the most impactful aspects of the software from a business perspective - focusing on risk above all else.</p> <ul> <li>Make sure aligns with business goals - Do I understand the business goals? Am I designing my test to validate the most important functionality that validates those goals.</li> <li>Risk based testing - Features with high business impact should be tested more thoroughly.</li> </ul>"},{"location":"testing/#clear-traceability","title":"Clear traceability","text":"<p>Being able to eaily link test cases or test results back to respective requirements or user stories.</p> <p>Ensures each test has a specific purpose tied to a functionality or performance of the application or performance under test.</p> <p>Allows stakeholders to understand what is being tested and why; and how the results relate back to the projects overall objectives. Crucial for effective reporting, understanding test coverage and ensure project requirements are properly validated.</p> <ul> <li>Map tests to requirements - Explicitedly link tests to requirements.</li> <li>Clear test naming - Name test in a way that clearly indicates their purpose and the functionality they're testing.</li> </ul>"},{"location":"testing/#reusability","title":"Reusability","text":"<p>Ability of test scripts or components of test scripts to be used in multiple test scenarios across different projects.</p> <p>Reduces efforts and time for creating and maintaining test scripts; and increases consistency - it's all about making modularly designed tests where common functionality is encapsulated into reusable functions or classes.</p> <ul> <li>Modularise your test scripts - Break your tests into smaller reusable functions enabling reuse across multiple tests.</li> <li>Leverage a test framework - Use a test framework that supports reusability from the start such as those that define setup or teardown methods and data-driven testing without having to implement it from scratch.</li> </ul>"},{"location":"testing/#manageable-and-scalable-test","title":"Manageable and scalable test","text":"<p>Ease of managing the test suite and its ability to grow or adapt while your software under test is also growing. Well-organised, easy to update or adjusted. Also implies test execution monitoring and reporting are streamlined and user friendly. The scalable element refers to the test suites capability to handle growth whether in form of increased tests, more complex scenarios or expanded functionality. Scalable test can be easily extended and maintain performance despite increased demands. Need to think of scalability from the start.</p> <ul> <li>Follow coding standards - Adhere to consistent coding standards to make easier to understand, maintain, expand. Should be doing code reviews and using linters for consistency and quality.</li> <li>Run tests as often as possible - Running your tests regularly will ensure they're reliable - makes them more managable and scalable; use CICD and incorporate tests into the same.</li> </ul>"},{"location":"testing/#accessible-across-company","title":"Accessible across company","text":"<p>Your tests, results and related documentation need to be readily available and understandable to various stakedholders within the organisation.</p> <p>The tool you use for testing should have user friendly interfaces that multiple team members can navigate for transparency, improves collaboration and ensures everyone can gain insights from the testing process. You want to make sure you have the whole team involved when doing automation not just one person on the sprint team.</p> <ul> <li>Maintain clear documentation - Clearer document for tests, processes and results so are easy to understand.</li> <li>Implement a testing dashboard - High level overviews of test results making easily digestible for non-technical stakeholders and the team and save a lot of time in reporting results.</li> </ul>"},{"location":"testing/#references","title":"References","text":"<ul> <li>\ud83c\udf0e Cucumber anti-patterns (part 1) and (part 2)</li> <li>\ud83c\udfa5 Redefining Test Automation: A New Perspective, Joe Colantonio</li> <li>\ud83c\udf0e Automation Scorecard, Test Guild</li> <li>\ud83c\udf0e Automation SCORE method, Does QA</li> </ul>"}]}